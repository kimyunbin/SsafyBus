buildscript {
	ext {
		queryDslVersion = "4.4.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.4.11'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'iroz'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
apply plugin: "io.spring.dependency-management"

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
	implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.4.1'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation("com.auth0:java-jwt:3.10.3")
	implementation("com.google.guava:guava:31.0.1-jre")

//	compile("com.querydsl:querydsl-core") // querydsl
//	compile("com.querydsl:querydsl-jpa") // querydsl
//	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.0")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.0")
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	// aws s3
	implementation('org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE')
	//configurations
	compile "org.springframework.boot:spring-boot-configuration-processor"

}
//def generated='src/main/generated'
//sourceSets {
//	main.java.srcDirs += [ generated ]
//}
//
//tasks.withType(JavaCompile) {
//	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
//}
//
//clean.doLast {
//	file(generated).deleteDir()
//}

test {
	useJUnitPlatform()
}

